<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Plotly.js Test</title>

    <link rel="stylesheet" href="/css/index.css">
    <%- include ("./common/cssScript") %>
        <!-- Jquery -->


        <!-- Plotly.js -->
        <script src="https://cdn.plot.ly/plotly-1.58.4.min.js"></script>

        <!-- Danfo.js -->
        <script src="https://cdn.jsdelivr.net/npm/danfojs@0.2.4/lib/bundle.min.js"></script>

        <!-- Tensorflow.js -->
        <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@2.0.0/dist/tf.min.js"></script>

</head>

<body>
    <div class="MainContainer">
        <div class="topBack">
            <div class="ui container expPage">
                <div class="textBox">
                    <p><span style="font-size: 26px; line-height: 36px;">안녕하세요 여러분,<br><span class="yt">데이터 분석</span>
                            실험실에 오신걸
                            환영합니다.</span><br><br>
                        지금 부터 아래의 테이터를 이용하여, 데이터를 분석하고 조작한 그래프를 확인 할 수 있습니다.
                    </p>
                </div>
            </div>
        </div>
        <!-- DataFrame's table will be shown -->
        <div class="Container_layout">
            <div class="DanfoContainer">
                <h1 class="">
                    데이터 조작 공간
                </h1>
                <form class="ui fluid form">
                    <div class="cb_is_grouped_box" style="text-align: left;">
                        <input type="checkbox" id="cb_is_grouped" onchange="onGroupedCheckBoxChange(this);" />
                        <label id="lb_is_grouped" for="cb_is_grouped">X축 기준 집계 (Aggregate)</label>
                        <br />
                        <br />
                        <select id="select_aggregate_method" onchange="onAggregateCheckBoxChange(this);">
                            <option value="mean">평균</option>
                            <option value="max">최대값</option>
                        </select>
                    </div>

                </form>
                <!-- DataFrame Controls -->
                <form class="ui fluid form">


                    <div id="sb_x_col" style="display: inline-block; text-align: left;">
                        X Column<select id="select_x_col" onchange="onDataFrameChange(this, 0);">
                            <option value="none">컬럼을 선택하세요.</option>
                            <!-- Option tag will be shown by processing Javascript function -->
                        </select>
                    </div>

                    <div id="sb_y_col" style="display: inline-block; text-align: left;">
                        <span id="span_y_col_text">Y Column : </span>
                        <select id="select_y_col" onchange="onDataFrameChange(this, 1);">
                            <option value="none">컬럼을 선택하세요.</option>
                            <!-- Option tag will be shown by processing Javascript function -->
                        </select>
                    </div>

                    <!-- Combo box second y column (will be used for line plot) -->
                    <div id="sb_y2_col" style="display: inline-block; text-align: left;">
                        <span id="span_y2_col_text">Y Column (for Line Plot) : </span>
                        <select id="select_y2_col" onchange="onDataFrameChange(this, 2);">
                            <option value="none">컬럼을 선택하세요.</option>
                            <!-- Option tag will be shown by processing Javascript function -->
                        </select>
                    </div>

                    <button type="button" class="ui icon button green" onclick="makeDataFrameBtn();"><i
                            class="check circle white icon"></i></button>
                    <button type="button" class="ui icon button red" onclick="resetDataFrame();"><i
                            class="trash alternate outline white icon"></i></button>
                </form>
                <div id="danfo_dataframe"></div>
            </div>

            <!-- Plotly's Graph will be shown -->
            <div class="PlotlyContainer">
                <h1>그래프 조작 공간</h1>
                <div class="cb_y2_axis_actf_box">
                    <input type="checkbox" id="cb_y2_axis_actf" onchange="onY2AxisCheckBoxChange(this);" />
                    <label id="lb_y2_axis_actf" for="cb_y2_axis_actf">Multiple Y Axis</label>
                </div>

                <!-- Graph Controls -->
                <form class="ui fluid form">
                    <div class="graph_layout">
                        <div class="property_box">
                            <select onchange="onGraphChange(this);" id="sb_graph_select">
                                <option value="lines" selected>선 그래프</option>
                                <option value="markers">산점도 그래프</option>
                                <option value="box">박스 그래프</option>
                                <option value="bar">막대 그래프</option>
                                <option value="combo">콤보 그래프</option>
                            </select>


                            <div id="describe_value">
                                <table>
                                    <tr class="defultTr">
                                        <th></th>
                                        <th>갯수</th>
                                        <th>평균</th>
                                        <th>표준편차</th>
                                        <th>최소값</th>
                                        <th>중앙값</th>
                                        <th>최대값</th>
                                        <th>관측값</th>
                                    </tr>
                                    <!-- <tr>
                                        <th>평균최고기온(°C)</th>
                                        <th>31</th>
                                        <th>19.654839</th>
                                        <th>7.264243</th>
                                        <th>7.3</th>
                                        <th>19.6</th>
                                        <th>32.099998</th>
                                        <th>52.769226</th>
                                    </tr>
                                    <tr>
                                        <th>균기온(°C) </th>
                                        <th>31</th>
                                        <th>19.654839</th>
                                        <th>7.264243</th>
                                        <th>7.3</th>
                                        <th>19.6</th>
                                        <th>32.099998</th>
                                        <th>52.769226</th>
                                    </tr> -->
                                </table>
                            </div>

                        </div>
                        <div class="graph_box">
                            <div class="PlotlyGraph" id="plotly_graph"></div>
                            <div class="trend_line">
                                <button type="button" class="ui button" onclick="makeSLGraphWithTrendline();">추세선 그리기</button>
                                <button type="button" class="ui button" onclick="makeScatterAndLineGraph();">추세선 초기화</button>
                            </div>
                            <div id="trendline_value">
                                <p id="trendline_x"></p>
                                <p id="trendline_y"></p>
                                <p id="trendline_equation"></p>
                                <p id="r_squared"></p>
                            </div>
                        </div>
                    </div>

                </form>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script>
        ////////////////////////////////////////////////////////
        // Variables    
        ////////////////////////////////////////////////////////
        let dataset_path = "";

        let graphType;

        let df; // DataFrame will be contained
        let count = 0;

        let dfXCol;
        let dfYCol;
        let dfY2Col;
        let dfXColData;
        let dfYColData;
        let dfY2ColData;

        let aggregateMethod = "";

        let isGrouped = 0;
        let isY2AxisActf = 0;

        let setResize;

        ////////////////////////////////////////////////////////
        // Page Initialize
        ////////////////////////////////////////////////////////
        $(window).resize(function () {
            clearTimeout(setResize)
            setResize = setTimeout(() => {
                $("#danfo_dataframe").html("")
                df.plot("danfo_dataframe").table();

            }, 100);
        })
        $(document).ready(function () {
            // Initialize the graph
            $("#sb_graph_select").find("option").eq(0).prop("selected", true);
            $("#select_aggregate_method").find("option").eq(0).prop("selected", true);
            $("input:checkbox[id='cb_is_grouped']").prop("checked", false);
            $("input:checkbox[id='cb_y2_axis_actf']").prop("checked", false);
            // $("#cb_is_grouped, #lb_is_grouped").hide();
            $("#select_aggregate_method").hide();
            $(".cb_y2_axis_actf_box").hide();
            hideDfY2Col();
            graphType = "lines";
            aggregateMethod = "mean";
            makeScatterAndLineGraph(graphType);

            //Initialize the DataFrame
            // Danfo script and will be shown on html
            if ("<%=dataset_id%>" == "0") {
                dataset_path = "https://raw.githubusercontent.com/dinb1242/datasets/master/weather-in-jeju.csv";
            } else {
                dataset_path = "https://raw.githubusercontent.com/dinb1242/datasets/master/weather-issue-data.csv";
            }
            try {
                dfd.read_csv(dataset_path)
                    .then((result) => {
                        initializeDf(result);
                    })
            } catch (err) {
                console.log(`데이터셋을 불러오는 중 오류가 발생했습니다.\n${err}`);
            }
        })

        function initializeDf(result) {
            // Dataframe init and print on html
            df = result;
            df.plot("danfo_dataframe").table({ layout: { autosize: true }, displaylogo: false });

            // Create select tag's options using columns of DataFrame
            let selectXCol = document.getElementById("select_x_col");
            let selectYCol = document.getElementById("select_y_col");
            let selectY2Col = document.getElementById("select_y2_col");
            let selectOption;

            dfCols = df.columns;
            dfCols.forEach((element, idx) => {
                selectOption = document.createElement("option");
                selectOption.setAttribute("value", element);
                selectOption.innerHTML = element;
                selectXCol.appendChild(selectOption);

                selectOption = document.createElement("option");
                selectOption.setAttribute("value", element);
                selectOption.innerHTML = element;
                selectYCol.appendChild(selectOption);

                selectOption = document.createElement("option");
                selectOption.setAttribute("value", element);
                selectOption.innerHTML = element;
                selectY2Col.appendChild(selectOption);
            });
        }

        ////////////////////////////////////////////////////////
        // Logic function
        ////////////////////////////////////////////////////////

        // 2-dim array to 1-dim array
        function reshapeTo1d(arr) {
            let twoDimArr = []
            arr.forEach(element => {
                twoDimArr.push(element[0])
            })

            return twoDimArr;
        }

        function makeDescribe() {
            $("#describe_value > table > tr").not('.defultTr').remove()
            let dataCol = [dfXCol, dfYCol, dfY2Col];
            dataCol = dataCol.filter(data => data != null) // null 필터링
            dataCol = dataCol.filter(data => df.loc({ columns: [data] }).col_types[0] != "string") // 
            let datas = df.describe().loc({ columns: [...dataCol] })
            console.log(datas)
            for (let num = 0; num < datas.col_data.length; num++) {
                let trElem = document.createElement('tr')
                let thElem = document.createElement('th')
                thElem.innerHTML = datas.columns[num];
                trElem.appendChild(thElem)
                datas.col_data[num].forEach((data, index) => {
                    let tdElem = document.createElement('td')
                    tdElem.innerHTML = data;
                    trElem.appendChild(tdElem)
                });
                document.getElementById("describe_value").getElementsByTagName("table")[0].appendChild(trElem)
            }
            if(dataCol.length != 0) {
                $("#describe_value").fadeIn()

            }
            // df.describe().loc({columns: [dfXCol, dfYCol]}).print()
        }

        // Number Range Function
        function range(start, end) {
            let arr = [];
            let length = end - start;

            for (var i = 0; i <= length; i++) {
                arr[i] = start;
                start++;
            }

            return arr;
        }

        function calcMaxAgainstX(uniqueXData, yCol) {
            let tempArr = []
            uniqueXData.forEach(label => {
                tempArr.push(Math.max.apply(null, reshapeTo1d(Array.from(df.query({ column: dfXCol, is: "==", to: label }).loc({ columns: [yCol] }).values))))
            })

            return tempArr;
        }

        function calcMeanAgainstX(uniqueXData, yCol) {
            let tempArr = []
            uniqueXData.forEach(label => {
                tempArr.push(df.query({ column: dfXCol, is: "==", to: label }).loc({ columns: [yCol] }).mean().values[0]);
            })

            return tempArr;
        }

        function calcRSquared(yTrue, yPred) {
            // yTure = dfYColData
            // yPred = trendY
            let tensorYTrue = tf.tensor1d(yTrue);
            let tensorYPred = tf.tensor1d(yPred);

            let sst = tensorYTrue.sub(tensorYTrue.mean()).square().sum()
            let sse = tensorYPred.sub(tensorYTrue.mean()).square().sum()
            let ssr = tensorYTrue.sub(tensorYPred).square().sum()

            let r2 = 1 - Array.from(ssr.div(sst).dataSync())[0]

            return r2;
        }

        // calcLSM Calculus for Trendline
        // it returns tensor array
        function calcLSM(xArr, yArr) {
            let tensorX = tf.tensor1d(xArr);
            let tensorY = tf.tensor1d(yArr);

            // Get Average
            let xMean = tensorX.mean();
            let yMean = tensorY.mean();

            // Get Coefficient and Intercept
            let divisor = tensorX.sub(xMean).mul(tensorY.sub(yMean)).sum()
            let dividend = tensorX.sub(xMean).square().sum();

            let coef = divisor.div(dividend);
            let intercept = yMean.sub(xMean.mul(coef));

            return [coef, intercept];
        }

        // Set new Graph
        function makeScatterAndLineGraph() {
            let trace1 = {
                x: dfXColData,
                y: dfYColData,
                mode: graphType
            }

            let layout = {
                title: `${dfXCol} and ${dfYCol} : Line Graph`,
                xaxis: {
                    title: dfXCol
                },
                yaxis: {
                    title: dfYCol
                },
                height: 400
            }

            let config = {
                responsive: true,
                displaylogo: false
            }

            let data = [trace1];
            // $("#trendline_value").hide()
            resetGraph();
            Plotly.newPlot("plotly_graph", data, layout, config);
        }

        // Scatter or Line Graph with Tendline()
        function makeSLGraphWithTrendline() {
            // Equation, tensor type
            let trendEquation = calcLSM(dfXColData, dfYColData);
            console.log(trendEquation[0].print(), trendEquation[1].print());

            let minX = Array.from(tf.tensor1d(dfXColData).min().dataSync())[0];
            let maxX = Array.from(tf.tensor1d(dfXColData).max().dataSync())[0];

            // X = dfXColData
            let trendY = Array.from(trendEquation[0].mul(dfXColData).add(trendEquation[1]).dataSync());

            let rSquared = Math.ceil(calcRSquared(dfYColData, trendY) * 10000) / 10000;

            // Get rounded numbers for quation
            let equationX = Math.ceil(Array.from(trendEquation[0].dataSync())[0] * 100) / 100;
            let equationY = Math.ceil(Array.from(trendEquation[1].dataSync())[0] * 100) / 100;

            // Show trendline's x and y value on html
            let pTagtrendX = document.getElementById("trendline_x");
            let pTagtrendY = document.getElementById("trendline_y");
            let pTagtrendEquation = document.getElementById("trendline_equation");
            let pTagRSquared = document.getElementById("r_squared");
            pTagtrendX.innerHTML = `x : ${equationX}`;
            pTagtrendY.innerHTML = `y : ${equationY}`;
            pTagtrendEquation.innerHTML = `Equation : ${equationX} * x + ${equationY}`;
            pTagRSquared.innerHTML = `R-Squared : ${rSquared} (about ${Math.ceil(rSquared * 100)}%)`

            let trace1 = {
                x: dfXColData,
                y: dfYColData,
                mode: graphType,
                name: dfYCol
            }

            let trendLine = {
                x: dfXColData,
                y: trendY,
                mode: "lines",
                name: "추세선"
            }

            let layout = {
                title: `${dfXCol} and ${dfYCol} : Trendline`,
                xaxis: {
                    title: dfXCol
                },
                yaxis: {
                    title: dfYCol
                },
                height: 400,
            }

            let config = {
                displaylogo: false
            }

            let data = [trace1, trendLine];
            $("#trendline_value").fadeIn()
            Plotly.newPlot("plotly_graph", data, layout, config)
        }

        function makeBoxGraph() {
            // A box graph that can remove a point which is clicked.
            let trace0 = {
                y: dfYColData,
                type: "box",
                name: dfYCol
            }

            let layout = {
                hovermode: "closest",
                title: `${dfYCol} : Box Graph`,
                yaxis: {
                    title: dfYCol
                },
                height: 400
            }

            let data = [trace0]

            let config = {
                displaylogo: false
            }

            Plotly.newPlot("plotly_graph", data, layout, config);

            // Create a click and elete data-point event on box plot
            var boxGraphElement = document.getElementById("plotly_graph");

            boxGraphElement.on("plotly_click", (data) => {
                onBoxGraphDataDelete(data);
            })
        }

        function makeBarGraph() {
            let trace0 = {
                x: dfXColData,
                y: dfYColData,
                type: "bar",
            }
            if (isGrouped) {
                /*
                    The the check box is checked, the flow is:
                        1. Extract unique data in X (It will be label data) -> uniqueXData Variable
                        2. Extract Max number in Y data using each unique data of X -> maxYData Array
                */
                let uniqueXData = df[dfXCol].unique().values;
                let yDataForBar;
                if (aggregateMethod == "mean") {
                    yDataForBar = calcMeanAgainstX(uniqueXData, dfYCol);
                } else if (aggregateMethod == "max") {
                    yDataForBar = calcMaxAgainstX(uniqueXData, dfYCol);
                }

                trace0.x = uniqueXData;
                trace0.y = yDataForBar;

                console.log(trace0.x, trace0.y);
            }
            let data = [trace0];

            let layout = {
                title: `${dfXCol} and ${dfYCol} : Bar Graph`,
                xaxis: {
                    title: dfXCol
                },
                yaxis: {
                    title: dfYCol
                },
                height: 400
            }

            let config = {
                displaylogo: false
            }
            Plotly.newPlot("plotly_graph", data, layout, config);
        }

        // Developing...
        function makeComboGraph() {
            // Implement 
            let traceForBar = {
                x: dfXColData,
                y: dfYColData,
                type: "bar",
                name: dfYCol
            }

            let traceForLine = {
                x: dfXColData,
                y: dfY2ColData,
                type: "line",
                name: dfY2Col,
            }

            if (isGrouped) {
                /*
                    The the check box is checked, the flow is:
                        1. Extract unique data in X (It will be label data) -> uniqueXData Variable
                        2. Extract Max number in Y data using each unique data of X -> maxYData Array
                */
                let uniqueXData = df[dfXCol].unique().values;
                let yDataForBar = null;
                let yDataForLine = null;

                if (aggregateMethod == "mean") {
                    yDataForBar = calcMeanAgainstX(uniqueXData, dfYCol);
                    yDataForLine = calcMeanAgainstX(uniqueXData, dfY2Col);
                } else if (aggregateMethod == "max") {
                    yDataForBar = calcMaxAgainstX(uniqueXData, dfYCol);
                    yDataForLine = calcMaxAgainstX(uniqueXData, dfY2Col);
                }

                traceForBar.x = uniqueXData;
                traceForBar.y = yDataForBar;

                traceForLine.x = uniqueXData;
                traceForLine.y = yDataForLine;

                console.log(traceForBar.x, traceForBar.y);
                console.log(traceForLine.x, traceForLine.y);
            }
            let data = [traceForBar, traceForLine];

            let layout = {
                title: `Combo Graph with Bar and Line`,
                xaxis: {
                    title: dfXCol
                },
                height: 400
            }

            let config = {
                displaylogo: false
            }

            if(isY2AxisActf){
                traceForLine["yaxis"] = "y2";
                layout["yaxis2"] = { title: dfY2Col, overlaying: "y", side: "right" };
            }
            Plotly.newPlot("plotly_graph", data, layout, config);
        }

        // Set new DataFrame
        function makeDataFrameBtn() {
            if (makeDataFrame()) {
                makeDescribe();
            }
        }
        async function makeDataFrame() {
            let isSelectBoxXColVisible = $("#sb_x_col").is(":visible");

            // When X col and Y col are activated.
            if (isSelectBoxXColVisible) {
                if (graphType == "combo") {
                    if (!dfXCol || !dfYCol || !dfY2Col || dfXCol == "none" || dfYCol == "none" || dfY2Col == "none") {
                        alert("모든 컬럼을 선택하세요.")
                        return false;
                    } else {
                        df.loc({ columns: [dfXCol, dfYCol, dfY2Col] }).plot("danfo_dataframe").table({ layout: {}, displaylogo: false}); // Reload DataFrame
                        dfXColData = reshapeTo1d(df.loc({ columns: [dfXCol] }).values)
                        dfYColData = reshapeTo1d(df.loc({ columns: [dfYCol] }).values)
                        dfY2ColData = reshapeTo1d(df.loc({ columns: [dfY2Col] }).values)
                    }
                } else {
                    if (!dfXCol || !dfYCol || dfXCol == "none" || dfYCol == "none") {
                        alert("모든 컬럼을 선택하세요.")
                        return false;
                    } else {
                        df.loc({ columns: [dfXCol, dfYCol] }).plot("danfo_dataframe").table({ layout: {}, displaylogo: false}); // Reload DataFrame
                        // Set Dataframe's data
                        dfXColData = reshapeTo1d(df.loc({ columns: [dfXCol] }).values)
                        dfYColData = reshapeTo1d(df.loc({ columns: [dfYCol] }).values)
                    }
                }
                // Re-draw a graph according to the graph type
                if (graphType == "lines" || graphType == "markers") {
                    await makeScatterAndLineGraph();
                }
                else if (graphType == "bar") {
                    await makeBarGraph();
                } else if (graphType == "combo") {
                    await makeComboGraph();
                }


            } else { // When Only one Columns
                if (!dfYCol || dfYCol == "none") {
                    alert("컬럼을 선택하세요.")
                    return false
                } else {
                    dfYColData = reshapeTo1d(df.loc({ columns: [dfYCol] }).values)
                    df.loc({ columns: [dfYCol] }).plot("danfo_dataframe").table({ layout: {}, displaylogo: false});
                    await makeBoxGraph()
                }
            }
            return true
        }

        // Reset Graph
        function resetGraph() {
            $("#trendline_value").hide();
            Plotly.newPlot("plotly_graph", [{
                x: null,
                y: null,
                mode: graphType
            }]);
            
        }

        // Reset DataFrame
        function resetDataFrame() {
            df.plot("danfo_dataframe").table();
            resetGraph(); // Grpah will be reset too.
        }

        // Hide X Col
        function hideDfXCol() {
            dfXCol = null; // As X Columns select box will be deleted, the data must be deleted.
            dfXColData = null;
            $("#select_x_col").find("option").eq(0).prop("selected", true); // When X column select box appeared, the default value must be initialized.
            $("#sb_x_col").hide();
        }

        function hideDfY2Col() {
            dfY2Col = null;
            dfY2ColData = null;
            $("#select_y2_col").find("option").eq(0).prop("selected", true);
            $("#sb_y2_col").hide();
        }

        function hideChIsGrouped() {
            isGrouped = 0; // Initialize before being hidden
            $("input:checkbox[id='cb_is_grouped']").prop("checked", false);
            $(".cb_is_grouped_box").hide();
        }

        function hideCbY2Axis() {
            isY2AxisActf = 0;
            $("input:checkbox[id='cb_y2_axis_actf']").prop("checked", false);
            $(".cb_y2_axis_actf_box").hide();
        }


        ////////////////////////////////////////////////////////
        // Handler functions
        ////////////////////////////////////////////////////////

        // when selected bar graph, is Checkbox checked or not
        function onGroupedCheckBoxChange(e) {
            isGrouped = $("#cb_is_grouped").is(":checked");
            if (isGrouped) {
                $("#select_aggregate_method").show();
            } else {
                $("#select_aggregate_method").hide();
            }
            try {
                makeBarGraph();
            } catch (err) {
                console.log("Columns are not defined.");
            }
        }

        function onAggregateCheckBoxChange(e) {
            aggregateMethod = e.value;
        }

        function onY2AxisCheckBoxChange(e) {
            console.log($("#cb_y2_axis_actf").is(":checked"));
            isY2AxisActf = $("#cb_y2_axis_actf").is(":checked");
            try {
                makeComboGraph();
            } catch (err) {
                console.log("Error Occured :\n" + err);
            }
        }

        // If a point on box graph is clicked
        async function onBoxGraphDataDelete(data) {
            let pts = '';
            let dataTrueIdx;

            // When click only data-point
            if (data.points.length == 1) {
                // pts = "x : " + data.points[0].x + "\ny : " + data.points[0].y;
                pts = "y : " + data.points[0].y;
                if (confirm("삭제 하시겠습니까?\n\n삭제될 데이터 :\n" + pts)) {
                    // Delete data-point
                    dataTrueIdx = reshapeTo1d(df.loc({ columns: [dfYCol] }).eq(data.points[0].y).data).indexOf(true)
                    df = df.drop({ index: [dataTrueIdx], axis: 0 }); // Data Drop
                    df = df.reset_index();

                    // Reload DataFrame and box plot
                    
                    if(await makeDataFrame()){
                        makeDescribe()
                    }

                } else {
                    return;
                }
            } else {
                console.log("데이터의 집합입니다.");
            }
        }

        // When select box of graph is changed
        let spanY2ColText = document.getElementById("span_y_col_text");

        function onGraphChange(e) {
            $("input:checkbox[id='cb_is_grouped']").prop("checked", false);
            $("#trendline_value").hide();
            graphType = e.value;


            if (graphType == "lines" || graphType == "markers") {
                $(".trend_line").fadeIn();

            } else {
                $(".trend_line").hide()
            }



            if (graphType == "lines" || graphType == "markers") {
                resetGraph();
                spanY2ColText.innerText = "Y Column";
                $("#sb_x_col").show();
                hideChIsGrouped();
                hideDfY2Col();
                hideCbY2Axis();
                makeScatterAndLineGraph();
            } else if (graphType == "box") {
                resetGraph();
                spanY2ColText.innerText = "Y Column";
                // If graphType is not "lines" or "markers"
                // X column and its data must be deleted.
                hideDfXCol();
                hideDfY2Col();
                hideChIsGrouped();
                hideCbY2Axis();
            } else if (graphType == "bar") {
                resetGraph();
                spanY2ColText.innerText = "Y Column";
                hideDfY2Col();
                hideCbY2Axis();
                $("#sb_x_col").show();
                $(".cb_is_grouped_box").css('display', 'inline-block');
                makeBarGraph();
            } else if (graphType == "combo") {
                resetGraph();
                spanY2ColText.innerText = "Y Column (for Bar Plot)"
                $("#sb_y2_col").show();
                $("#sb_x_col").show();
                $(".cb_is_grouped_box").css('display', 'inline-block');
                $(".cb_y2_axis_actf_box").show();
            }

        }

        function onDataFrameChange(e, selectBoxIdx) {
            // 0: first select box
            // 1: second select box
            if (selectBoxIdx == 0) {
                dfXCol = e.value;
            } else if (selectBoxIdx == 1) {
                dfYCol = e.value;
            } else if (selectBoxIdx == 2) {
                dfY2Col = e.value;
            }
            console.log(dfXCol, dfYCol, dfY2Col);
        }

            ////////////////////////////////////////////////////////
            // Table Event Handler
            ////////////////////////////////////////////////////////
    </script>
</body>

</html>