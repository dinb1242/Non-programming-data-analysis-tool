<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Plotly.js Test</title>

    <link rel="stylesheet" href="/css/index.css">

    <!-- Jquery -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

    <!-- Plotly.js -->
    <script src="https://cdn.plot.ly/plotly-1.58.4.min.js"></script>

    <!-- Danfo.js -->
    <script src="https://cdn.jsdelivr.net/npm/danfojs@0.2.4/lib/bundle.min.js"></script>

    <!-- Tensorflow.js -->
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@2.0.0/dist/tf.min.js"></script>

</head>

<body>
    <div class="MainContainer">

        <!-- DataFrame's table will be shown -->
        <div class="DanfoContainer">
            <h1>Danfo.js Test</h1>

            <!-- DataFrame Controls -->
            <div id="select_box_x_col" style="display: inline;">
                X Column : <select id="select_x_col" onchange="onDataFrameChange(this, 0);">
                    <option value="none">컬럼을 선택하세요.</option>
                    <!-- Option tag will be shown by processing Javascript function -->
                </select>
            </div>

            <div id="select_box_y_col" style="display: inline">
                Y Column : <select id="select_y_col" onchange="onDataFrameChange(this, 1);">
                    <option value="none">컬럼을 선택하세요.</option>
                    <!-- Option tag will be shown by processing Javascript function -->
                </select>
            </div>

            <button onclick="makeDataFrame();">선택</button>
            <button onclick="resetDataFrame();">초기화</button>

            <div id="danfo_dataframe"></div>
        </div>

        <!-- Plotly's Graph will be shown -->
        <div class="PlotlyContainer">
            <h1>Plotly.js Test</h1>

            <!-- Graph Controls -->
            <select onchange="onGraphChange(this);" id="graphSelect">
                <option value="lines" selected>선 그래프</option>
                <option value="markers">산점도 그래프</option>
                <option value="box">박스 그래프</option>
                <option value="histogram">히스토그램</option>
            </select>
            <div class="PlotlyGraph" id="plotly_graph"></div>
            <button onclick="makeSLGraphWithTrendline();">추세선 그리기 (선, 산점도만 해당)</button>
            <button onclick="makeScatterAndLineGraph();">추세선 초기화</button>
        </div>
    </div>

    <!-- Scripts -->
    <script>
        ////////////////////////////////////////////////////////
        // Variables    
        ////////////////////////////////////////////////////////
        let graphType;

        let df; // DataFrame will be contained

        let dfXCol;
        let dfYCol;
        let dfXColData;
        let dfYColData;

        ////////////////////////////////////////////////////////
        // Page Initialize
        ////////////////////////////////////////////////////////
        $(document).ready(function () {
            // Initialize the graph
            $("#graphSelect").find("option").eq(0).prop("selected", true);
            graphType = "lines";
            makeScatterAndLineGraph(graphType);

            //Initialize the DataFrame
            // Danfo script and will be shown on html
            dfd.read_csv("https://raw.githubusercontent.com/dinb1242/datasets/master/weather-in-jeju.csv")
                .then((result) => {
                    initializeDf(result);
                })
        })

        function initializeDf(result) {
            // Dataframe init and print on html
            df = result;
            df.plot("danfo_dataframe").table({ layout: { height: 800 } });

            // Create select tag's options using columns of DataFrame
            let selectXCol = document.getElementById("select_x_col");
            let selectYCol = document.getElementById("select_y_col");
            let selectOption;

            dfCols = df.columns;
            dfCols.forEach((element, idx) => {
                selectOption = document.createElement("option");
                selectOption.setAttribute("value", element);
                selectOption.innerHTML = element;
                selectXCol.appendChild(selectOption);

                selectOption = document.createElement("option");
                selectOption.setAttribute("value", element);
                selectOption.innerHTML = element;
                selectYCol.appendChild(selectOption);
            });
        }

        ////////////////////////////////////////////////////////
        // Logic function
        ////////////////////////////////////////////////////////

        // Number Range Function
        function range(start, end) {
            let arr = [];
            let length = end - start;

            for (var i = 0; i <= length; i++) {
                arr[i] = start;
                start++;
            }

            return arr;
        }

        // LSM Calculus for Trendline
        function LSM(xArr, yArr) {
            let tensorX = tf.tensor1d(xArr);
            let tensorY = tf.tensor1d(yArr);

            // Get Average
            let xMean = tensorX.mean();
            let yMean = tensorY.mean();

            // Get Coefficient and Intercept
            let divisor = tensorX.sub(xMean).mul(tensorY.sub(yMean)).sum()
            let dividend = tensorX.sub(xMean).square().sum();

            let coef = divisor.div(dividend);
            let intercept = yMean.sub(xMean.mul(coef));

            // coef = Array.from(coef.dataSync())[0];
            // intercept = Array.from(intercept.dataSync())[0];

            return [coef, intercept];
        }

        // Set new Graph
        function makeScatterAndLineGraph() {
            let trace1 = {
                x: dfXColData,
                y: dfYColData,
                mode: graphType
            }

            let data = [trace1];

            Plotly.newPlot("plotly_graph", data)
        }

        // Scatter or Line Graph with Tendline()
        function makeSLGraphWithTrendline() {
            // Equation
            let trendEquation = LSM(dfXColData, dfYColData);
            console.log(trendEquation[0].print(), trendEquation[1].print());

            let minX = Array.from(tf.tensor1d(dfXColData).min().dataSync())[0];
            let maxX = Array.from(tf.tensor1d(dfXColData).max().dataSync())[0];

            let trendX = range(minX, maxX);
            let trendY = Array.from(trendEquation[0].mul(trendX).add(trendEquation[1]).dataSync());
            console.log("range below : ");
            console.log(trendX, trendY);

            let trace1 = {
                x: dfXColData,
                y: dfYColData,
                mode: graphType
            }

            let trendLine = {
                x: trendX,
                y: trendY,
                mode: "lines"
            }

            let data = [trace1, trendLine];

            Plotly.newPlot("plotly_graph", data)
        }

        function makeBoxGraph() {
            Plotly.newPlot("plotly_graph", [{
                y: dfYColData,
                type: "box"
            }])
        }

        // Set new DataFrame
        async function makeDataFrame() {
            let isSelectBoxXColVisible = $("#select_box_x_col").is(":visible");

            if (isSelectBoxXColVisible) {
                if (!dfXCol || !dfYCol || dfXCol == "none" || dfYCol == "none") {
                    alert("모든 컬럼을 선택하세요.")
                } else {
                    df.loc({ columns: [dfXCol, dfYCol] }).plot("danfo_dataframe").table();
                    dfXColData = df[dfXCol].values;
                    dfYColData = df[dfYCol].values;

                    await makeScatterAndLineGraph()
                }
            } else {
                if (!dfYCol || dfYCol == "none") {
                    alert("컬럼을 선택하세요.")
                } else {
                    df.loc({ columns: [dfYCol] }).plot("danfo_dataframe").table();
                    dfYColData = df[dfYCol].values;

                    await makeBoxGraph()
                }
            }
        }

        // Reset Graph
        function resetGraph() {
            Plotly.newPlot("plotly_graph", [{
                x: null,
                y: null,
                mode: graphType
            }]);
        }

        // Reset DataFrame
        function resetDataFrame() {
            df.plot("danfo_dataframe").table();
            resetGraph(); // Grpah will be reset too.
        }

        ////////////////////////////////////////////////////////
        // Handler functions
        ////////////////////////////////////////////////////////

        // When select box of graph is changed
        function onGraphChange(e) {
            graphType = e.value;
            if (graphType == "lines" || graphType == "markers") {
                $("#select_box_x_col").show();
                makeScatterAndLineGraph();
            } else if (graphType == "box") {
                resetGraph();
                // If graphType is not "lines" or "markers"
                // X columns must be deleted.
                dfXCol = null; // As X Columns select box will be deleted, the data must be deleted.
                $("#select_x_col").find("option").eq(0).prop("selected", true); // When X column select box appeared, the default value must be initialized.
                $("#select_box_x_col").hide();
            }
        }

        function onDataFrameChange(e, selectBoxIdx) {
            // 0: first select box
            // 1: second select box
            selectBoxIdx == 0 ? dfXCol = e.value : dfYCol = e.value;
            console.log(dfXCol, dfYCol);
        }

            ////////////////////////////////////////////////////////
            // Table Event Handler
            ////////////////////////////////////////////////////////
    </script>
</body>

</html>